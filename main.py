import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import json
import random
from playwright.sync_api import sync_playwright
import datetime
import re
import os
from time import sleep
import threading 
import logging
from decouple import config
import bs4

bot = telebot.TeleBot(config("BOT_TOKEN"))
ADMIN_ID = int(config("ADMIN_ID"))

month_replace = {
    "—è–Ω–≤": "01", "—Ñ–µ–≤": "02", "–º–∞—Ä": "03", "–∞–ø—Ä": "04", "–º–∞–π": "05", "–∏—é–Ω": "06",
    "–∏—é–ª": "07", "–∞–≤–≥": "08", "—Å–µ–Ω": "09", "–æ–∫—Ç": "10", "–Ω–æ—è": "11", "–¥–µ–∫": "12"
}

user_state = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename="broadcast_errors.log", level=logging.ERROR, 
                    format="%(asctime)s - %(message)s")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
broadcast_text = None

@bot.message_handler(commands=["broadcast"])
def broadcast_message(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if message.from_user.id == ADMIN_ID:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(message, confirm_broadcast)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
def confirm_broadcast(message):
    global broadcast_text
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_text = message.text

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.send_message(message.chat.id, f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n{broadcast_text}", 
                     reply_markup=confirm_keyboard())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def confirm_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("‚úÖ –î–∞"), KeyboardButton("‚ùå –ù–µ—Ç"))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text in ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"])
def handle_confirmation(message):
    global broadcast_text
    if message.text == "‚úÖ –î–∞":
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...", reply_markup=ReplyKeyboardRemove())
        send_broadcast(message, broadcast_text)
    else:
        bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        broadcast_text = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
def format_broadcast_message(text):
    return (
        "üì¢ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤*\n\n"
        f"üí¨ {text}\n\n"
    )

def send_broadcast(message, text):
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        with open("groups.txt", "r", encoding="utf-8") as f:
            lines = f.readlines()

        total_users = 0
        success_count = 0
        failed_count = 0

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = format_broadcast_message(text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for line in lines:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
            line = line.strip()
            if not line:
                logging.warning("–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ groups.txt")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

            # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ user_id –∏ group
            parts = line.split(": ")
            if len(parts) == 0:
                logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ groups.txt: {line}")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ user_id

            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id (–≥—Ä—É–ø–ø–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π)
            user_id = parts[0]

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = bot.send_message(user_id, formatted_message, parse_mode="Markdown")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                save_last_broadcast(user_id, sent_message.message_id)
                
                success_count += 1
            except Exception as e:
                failed_count += 1
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            total_users += 1

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        report = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}"
        )
        bot.send_message(message.chat.id, report, reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
    finally:
        global broadcast_text
        broadcast_text = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
def delete_last_broadcast():
    try:
        with open("last_broadcast.json", "r") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return 0, 0  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    total_users = len(data)
    success_count = 0
    failed_count = 0

    for user_id, message_id in data.items():
        try:
            bot.delete_message(user_id, message_id)
            success_count += 1
        except Exception as e:
            failed_count += 1
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    with open("last_broadcast.json", "w") as f:
        json.dump({}, f, indent=4)

    return success_count, failed_count

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç—á–µ—Ç–æ–º
@bot.message_handler(commands=["delete_last_broadcast"])
def handle_delete_last_broadcast(message):
    if message.from_user.id == ADMIN_ID:
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        success_count, failed_count = delete_last_broadcast()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        report = (
            f"‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {success_count + failed_count}\n"
            f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {success_count}\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {failed_count}"
        )
        bot.send_message(message.chat.id, report, reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def animate_loading(message, stop_event):
    loading_text = "–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
    msg = bot.send_message(message.chat.id, loading_text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg_id = msg.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

    progress = 0  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    max_progress = 35  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    steps = 9  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∑–∞ 4 —Å–µ–∫—É–Ω–¥—ã
    step_size = max_progress / steps  # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞

    for _ in range(steps):
        if stop_event.is_set():
            break

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –±–∞–∑–æ–≤—ã–π —à–∞–≥ + —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        progress = min(progress + step_size + random.uniform(-1, 1), max_progress)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = "[" + "-" * int(progress) + ">" + " " * (max_progress - int(progress)) + "]"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        bot.edit_message_text(f"{loading_text}\n{progress_bar}", message.chat.id, msg_id)
        
        sleep(0.3)  # –ü–∞—É–∑–∞ 0.3 —Å–µ–∫—É–Ω–¥—ã

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    bot.delete_message(message.chat.id, msg_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def save_last_broadcast(user_id, message_id):
    try:
        with open("last_broadcast.json", "r") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = {}

    data[user_id] = message_id

    with open("last_broadcast.json", "w") as f:
        json.dump(data, f, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ JSON
def schedule_exists(user_group, formatted_date):
    try:
        with open("schedule_cache.json", "r", encoding="utf-8") as file:
            data = json.load(file)
            return user_group in data and formatted_date in data[user_group]
    except (FileNotFoundError, json.JSONDecodeError):
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ JSON)
def send_schedule_with_animation(message, user_group, user_date=None):
    if not user_date:
        user_date = message.text.strip().lower()
    
    match = re.match(r"(\d{1,2})[ .]?([–∞-—è–ê-–Ø]+|\d{2})?", user_date)
    if not match:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 06.03 –∏–ª–∏ 06 –ú–∞—Ä.", reply_markup=main_menu())
        return

    day, month_input = match.groups()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å, –µ—Å–ª–∏ –¥–µ–Ω—å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
    day = day.zfill(2)
    
    month = month_replace.get(month_input[:3], month_input) if month_input else None
    if not month:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞. –ü—Ä–∏–º–µ—Ä: 06 –ú–∞—Ä, 06 –º–∞—Ä—Ç–∞.", reply_markup=main_menu())
        return

    formatted_date = f"{datetime.datetime.now().year}-{month}-{day}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ JSON
    if schedule_exists(user_group, formatted_date):
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        schedule = get_schedule(user_group, formatted_date)
        bot.send_message(message.chat.id, schedule, reply_markup=main_menu())  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    stop_event = threading.Event()
    threading.Thread(target=animate_loading, args=(message, stop_event)).start()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Playwright
    schedule = fetch_schedule_via_playwright(user_group, formatted_date)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    stop_event.set()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ JSON
    cache = load_schedule_cache()
    if user_group not in cache:
        cache[user_group] = {}
    cache[user_group][formatted_date] = schedule
    save_schedule_cache(cache)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    bot.send_message(message.chat.id, schedule, reply_markup=main_menu())

def clean_old_cache():
    cache = load_schedule_cache()
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    for group in cache:
        cache[group] = {date: schedule for date, schedule in cache[group].items() if date >= today}
    save_schedule_cache(cache)

def load_questions():
    try:
        with open('questions.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def get_group(user_id):
    try:
        with open("groups.txt", "r", encoding="utf-8") as f:
            lines = f.readlines()
            for line in lines:
                line = line.strip()
                if not line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    continue
                try:
                    saved_user_id, group = line.split(": ")
                    if saved_user_id == str(user_id):
                        return group
                except ValueError:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                    logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ groups.txt: {line}")
                    continue
    except FileNotFoundError:
        return None
    return None

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    markup.add(KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))
    markup.add(KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    return markup

@bot.message_handler(commands=["start"])
def start(message):
    user_id = str(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ groups.txt
    try:
        with open("groups.txt", "r", encoding="utf-8") as f:
            lines = f.readlines()
    except FileNotFoundError:
        lines = []

    user_exists = False
    for line in lines:
        if line.startswith(f"{user_id}:"):
            user_exists = True
            break

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø—É—Å—Ç–æ–π –≥—Ä—É–ø–ø–æ–π
    if not user_exists:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        try:
            with open("groups.txt", "r", encoding="utf-8") as f:
                content = f.read()
                if not content.endswith("\n"):
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                    with open("groups.txt", "a", encoding="utf-8") as f:
                        f.write("\n")
        except FileNotFoundError:
            pass  # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ –ø–æ–∑–∂–µ

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with open("groups.txt", "a", encoding="utf-8") as f:
            f.write(f"{user_id}: \n")  # –ü—É—Å—Ç–∞—è –≥—Ä—É–ø–ø–∞ –∏ —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

STATE_WAITING_FOR_DATE = "waiting_for_date"

@bot.message_handler(func=lambda message: message.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def schedule_handler(message):
    user_group = get_group(message.from_user.id)
    
    if not user_group:
        bot.send_message(message.chat.id, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=main_menu())
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞" –∏ "–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É"
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–°–µ–≥–æ–¥–Ω—è"))
    markup.add(KeyboardButton("–ó–∞–≤—Ç—Ä–∞"))
    markup.add(KeyboardButton("–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É"))
    markup.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: handle_day_selection(msg, user_group))

def handle_day_selection(message, user_group):
    if message.text == "–°–µ–≥–æ–¥–Ω—è":
        date = datetime.datetime.now().strftime("%d.%m")
        send_schedule_with_animation(message, user_group, date)
    elif message.text == "–ó–∞–≤—Ç—Ä–∞":
        date = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%d.%m")
        send_schedule_with_animation(message, user_group, date)
    elif message.text == "–£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"
        user_state[message.chat.id] = STATE_WAITING_FOR_DATE
        bot.send_message(message.chat.id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 06.03 –∏–ª–∏ 06 –ú–∞—Ä):")
        bot.register_next_step_handler(message, lambda msg: handle_custom_date(msg, user_group))
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu())

def handle_custom_date(message, user_group):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    if user_state.get(message.chat.id) == STATE_WAITING_FOR_DATE:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—É
        user_date = message.text.strip().lower()
        send_schedule_with_animation(message, user_group, user_date)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state[message.chat.id] = None
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
def ask_question_handler(message):
    categories = load_questions()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ JSON
    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    for category in categories.keys():
        markup.add(KeyboardButton(category))  # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    markup.add(KeyboardButton("–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"
    markup.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –æ–Ω –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    user_state[message.chat.id] = 'main_menu'

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@bot.message_handler(func=lambda message: message.text in load_questions().keys())
def category_handler(message):
    categories = load_questions()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ JSON
    category = message.text
    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    for question in categories[category].keys():
        markup.add(KeyboardButton(question))  # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    markup.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ {category}:", reply_markup=markup)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –æ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    user_state[message.chat.id] = category

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
@bot.message_handler(func=lambda message: any(message.text in q for q in load_questions().values()))
def answer_question_handler(message):
    categories = load_questions()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ JSON

    for category, questions in categories.items():
        if message.text in questions:
            bot.send_message(message.chat.id, questions[message.text])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            break

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings_handler(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üìå –£–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É"))
    markup.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìå –£–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É")
def set_group_handler(message):
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:")
    bot.register_next_step_handler(message, save_group)

def save_group(message):
    user_id = str(message.from_user.id)
    group_name = message.text.strip()

    if not group_name:
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    update_user_group(user_id, group_name)
    bot.send_message(message.chat.id, f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ {group_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=main_menu())

def send_schedule(message, user_group):
    user_date = message.text.strip().lower()
    match = re.match(r"(\d{1,2})[ .]?([–∞-—è–ê-–Ø]+|\d{2})?", user_date)
    if not match:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 06.03 –∏–ª–∏ 06 –ú–∞—Ä.")
        return

    day, month_input = match.groups()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å, –µ—Å–ª–∏ –¥–µ–Ω—å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã
    day = day.zfill(2)
    
    month = month_replace.get(month_input[:3], month_input) if month_input else None
    if not month:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞. –ü—Ä–∏–º–µ—Ä: 06 –ú–∞—Ä, 06 –º–∞—Ä—Ç–∞.")
        return

    formatted_date = f"{datetime.datetime.now().year}-{month}-{day}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ Playwright
    schedule = get_schedule(user_group, formatted_date)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, schedule)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_handler(message):
    current_state = user_state.get(message.chat.id, 'main_menu')

    if current_state == 'main_menu':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        sent_message = bot.send_message(message.chat.id, "‚úÖ", reply_markup=main_menu())
        sleep(1)
        bot.delete_message(message.chat.id, message.message_id)
        bot.delete_message(message.chat.id, sent_message.message_id)
        user_state[message.chat.id] = 'main_menu'
    elif current_state in load_questions().keys():
        categories = load_questions() 
        markup = ReplyKeyboardMarkup(resize_keyboard=True)

        for category in categories.keys():
            markup.add(KeyboardButton(category))

        markup.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

        user_state[message.chat.id] = 'main_menu'

def load_schedule_cache():
    if not os.path.exists("schedule_cache.json"):
        return {}
    try:
        with open("schedule_cache.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Ñ–∞–π–ª
def save_schedule_cache(cache):
    with open("schedule_cache.json", "w", encoding="utf-8") as f:
        json.dump(cache, f, ensure_ascii=False, indent=4)

def get_schedule(group, date):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ Playwright.
    –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É, –æ–Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –∫—ç—à.
    """
    cache = load_schedule_cache()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫—ç—à–µ
    if group in cache and date in cache[group]:
        return cache[group][date]

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ Playwright
    schedule = fetch_schedule_via_playwright(group, date)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫—É –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–Ω–æ–º –¥–Ω–µ
    if "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏" in schedule or "‚ùå –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π" in schedule or "‚ùå –í—ã—Ö–æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π" in schedule:
        return schedule  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–Ω—ã—Ö –≤ –∫—ç—à

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
    if group not in cache:
        cache[group] = {}
    cache[group][date] = schedule
    save_schedule_cache(cache)

    return schedule

def fetch_schedule_via_playwright(group, date):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Playwright.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    url = f"https://rgsu.net/for-students/timetable/timetable/?group={group}&date={date}&week=9"

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
            page.set_extra_http_headers({
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
            })

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫—É–Ω–¥
            page.goto(url, timeout=4000, wait_until="domcontentloaded")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–ü–æ –≥—Ä—É–ø–ø–µ {group} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
            no_data_container = page.query_selector(".n-timetable-draw#mainDrawContainer")
            if no_data_container:
                no_data_text = no_data_container.inner_text()
                if f"–ü–æ –≥—Ä—É–ø–ø–µ {group} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö." in no_data_text:
                    return f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}:\n‚ùå –í—ã—Ö–æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π."

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            page.wait_for_selector(".n-timetable-day__item", timeout=10000)

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule_items = page.query_selector_all(".n-timetable-day__item")
            if not schedule_items:
                return f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}:\n‚ùå –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π."

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            schedule_text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}:\n\n"

            for item in schedule_items:
                time_from = item.query_selector(".n-timetable-day__from")
                time_to = item.query_selector(".n-timetable-day__to")
                subject = item.query_selector(".n-timetable-card__title")
                subject_type = item.query_selector(".n-timetable-card__category")
                location = item.query_selector(".n-timetable-card__auditorium")
                teacher = item.query_selector(".n-timetable-card__affiliation")
                address = item.query_selector(".n-timetable-card__address")

                time_from_text = time_from.inner_text() if time_from else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                time_to_text = time_to.inner_text() if time_to else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                subject_text = subject.inner_text() if subject else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
                subject_type_text = subject_type.inner_text().capitalize() if subject_type else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
                location_text = location.inner_text() if location else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ"
                teacher_text = teacher.inner_text() if teacher else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"
                address_text = address.inner_text() if address else ""

                # –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥—Ä–µ—Å "—É–ª. –õ–æ—Å–∏–Ω–æ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è, 40"
                if address_text == "—É–ª. –õ–æ—Å–∏–Ω–æ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è, 40":
                    address_text = ""

                lesson_info = [
                    f"‚è∞ {time_from_text} - {time_to_text}",
                    f"üìñ {subject_text}",
                    f"{subject_type_text}",
                    f"üìç {location_text}",
                    f"üë®‚Äçüè´ {teacher_text}",
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –æ–Ω –Ω–µ "—É–ª. –õ–æ—Å–∏–Ω–æ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è, 40"
                if address_text:
                    lesson_info.append(f"üè´ {address_text}")

                schedule_text += "\n".join(lesson_info) + "\n\n"

            return schedule_text

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {date}: {e}")
            return f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}:\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏."
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            browser.close()

def read_groups_file():
    """
    –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª groups.txt –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–¥–∏—Ä–æ–≤–æ–∫: utf-8, cp1251, ISO-8859-1.
    """
    encodings = ['utf-8', 'cp1251', 'ISO-8859-1']  # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫
    for encoding in encodings:
        try:
            with open("groups.txt", "r", encoding=encoding) as f:
                return f.readlines()
        except UnicodeDecodeError:
            continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
        except FileNotFoundError:
            return []  # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    raise UnicodeDecodeError("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª groups.txt —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫.")

def write_groups_file(lines):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª groups.txt –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ utf-8.
    """
    with open("groups.txt", "w", encoding="utf-8") as f:
        f.writelines(lines)

def update_user_group(user_id, group_name):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª–µ groups.txt.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ.
    """
    lines = read_groups_file()
    found = False
    updated_lines = []

    for line in lines:
        if line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            try:
                saved_user_id, saved_group = line.strip().split(": ")
                if saved_user_id == user_id:
                    updated_lines.append(f"{user_id}: {group_name}\n")
                    found = True
                else:
                    updated_lines.append(line + "\n")
            except ValueError:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ groups.txt: {line}")
                continue

    if not found:
        updated_lines.append(f"{user_id}: {group_name}\n")

    write_groups_file(updated_lines)

@bot.message_handler(func=lambda message: message.text == "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
def contact_developer_handler(message):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(message.chat.id, "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:")
    bot.register_next_step_handler(message, forward_message_to_admin)

def forward_message_to_admin(message):
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    user_id = message.from_user.id
    user_first_name = message.from_user.first_name
    user_username = f"@{message.from_user.username}" if message.from_user.username else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    user_message = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    user_state[user_id] = {"waiting_for_admin_reply": True}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_message = (
        f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"üÜî ID: {user_id}\n"
        f"üë§ –ò–º—è: {user_first_name}\n"
        f"üìõ –Æ–∑–µ—Ä–Ω–µ–π–º: {user_username}\n\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{user_message}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    bot.send_message(ADMIN_ID, admin_message)
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.reply_to_message and message.from_user.id == ADMIN_ID)
def handle_admin_reply(message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_reply = message.text

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    original_message = message.reply_to_message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    if "üÜî ID:" not in original_message or "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:" not in original_message:
        bot.send_message(ADMIN_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id_part = original_message.split("üÜî ID: ")[1]
        user_id = int(user_id_part.split("\n")[0])
    except (IndexError, ValueError) as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å user_id, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.send_message(ADMIN_ID, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sent_message = bot.send_message(user_id, f"üì® –û—Ç–≤–µ—Ç –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n\n{admin_reply}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sent_message —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if hasattr(sent_message, 'message_id'):
            bot.send_message(ADMIN_ID, f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")
        else:
            # –ï—Å–ª–∏ sent_message –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            bot.send_message(ADMIN_ID, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {sent_message}")
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.send_message(ADMIN_ID, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_state:
        user_state[user_id]["waiting_for_admin_reply"] = False

bot.infinity_polling()